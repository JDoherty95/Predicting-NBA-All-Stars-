{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9de32b11-1610-4a80-b8b6-8e8bac117937",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'databall'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/pb/9nrds4y576x41j1jw01gnkc40000gn/T/ipykernel_9144/4082085510.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mdataball\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mteam_stats\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpossessions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mast_pct\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAST\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMIN\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTEAM_MIN\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTEAM_FGM\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFGM\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'databall'"
     ]
    }
   ],
   "source": [
    "from databall.team_stats import possessions\n",
    "\n",
    "\n",
    "def ast_pct(data):\n",
    "    return data.AST / ((data.MIN / (data.TEAM_MIN / 5) * data.TEAM_FGM) - data.FGM)\n",
    "\n",
    "\n",
    "def blk_pct(data):\n",
    "    return data.BLK * (data.TEAM_MIN / 5) / (data.MIN * (data.OPP_FGA - data.OPP_FG3A))\n",
    "\n",
    "\n",
    "def dreb_pct(data):\n",
    "    return data.DREB * (data.TEAM_MIN / 5) / (data.MIN * (data.TEAM_DREB + data.OPP_OREB))\n",
    "\n",
    "\n",
    "def game_score(data):\n",
    "    return data.PTS + 0.4*data.FGM - 0.7*data.FGA - 0.4*(data.FTA - data.FTM) + 0.7*data.OREB + 0.3*data.DREB + \\\n",
    "           data.STL + 0.7*data.AST + 0.7*data.BLK - 0.4*data.PF - data.TOV\n",
    "\n",
    "\n",
    "def oreb_pct(data):\n",
    "    return data.OREB * (data.TEAM_MIN / 5) / (data.MIN * (data.TEAM_OREB + data.OPP_DREB))\n",
    "\n",
    "\n",
    "def reb_pct(data):\n",
    "    return data.REB * (data.TEAM_MIN / 5) / (data.MIN * (data.TEAM_REB + data.OPP_REB))\n",
    "\n",
    "\n",
    "def stl_pct(data):\n",
    "    return data.STL * (data.TEAM_MIN / 5) / (data.MIN * possessions(data))\n",
    "\n",
    "\n",
    "def usg_pct(data):\n",
    "    return (data.FGA + 0.44 * data.FTA + data.TOV) * (data.TEAM_MIN / 5) / \\\n",
    "           (data.MIN * (data.TEAM_FGA + 0.44 * data.TEAM_FTA + data.TEAM_TOV))\n",
    "\n",
    "\n",
    "def def_rating(data):\n",
    "    poss = possessions(data)\n",
    "    dor_pct = data.OPP_OREB / (data.OPP_OREB + data.REB)\n",
    "    dfg_pct = data.OPP_FGM / data.OPP_FGA\n",
    "    fm_wt = (dfg_pct * (1 - dor_pct)) / (dfg_pct * (1 - dor_pct) + (1 - dfg_pct) * dor_pct)\n",
    "    stops1 = data.STL + data.BLK + fm_wt * (1 - 1.07 * dor_pct) + data.DREB * (1 - fm_wt)\n",
    "    stops2 = (((data.OPP_FGA - data.OPP_FGM - data.BLK) / data.TEAM_MIN) * fm_wt * (1 - 1.07 * dor_pct) +\n",
    "              ((data.OPP_TOV - data.STL) / data.TEAM_MIN)) * data.MIN + \\\n",
    "             (data.PF / data.TEAM_PF) * 0.4 * data.OPP_FTA * (1 - (data.OPP_FTM / data.OPP_FTA)) ** 2\n",
    "    stops = stops1 + stops2\n",
    "    stop_pct = (stops * data.OPP_MIN) / (poss * data.MIN)\n",
    "    team_def_rating = 100 * (data.OPP_PTS / poss)\n",
    "    d_pts_per_sc_poss = data.OPP_PTS / \\\n",
    "        (data.OPP_FGM + (1 - (1 - (data.OPP_FTM / data.OPP_FTA)) ** 2) * 0.4 * data.OPP_FTA)\n",
    "    return team_def_rating + 0.2 * (100 * d_pts_per_sc_poss * (1 - stop_pct) - team_def_rating)\n",
    "\n",
    "\n",
    "def off_rating(data):\n",
    "    q_ast = data.MIN / (data.TEAM_MIN / 5) * 1.14 * (data.TEAM_AST - data.AST) / data.TEAM_FGM + \\\n",
    "            (((data.TEAM_AST / data.TEAM_MIN) * data.MIN * 5 - data.AST) /\n",
    "             ((data.TEAM_FGM / data.TEAM_MIN) * data.MIN * 5 - data.FGM)) * (1 - data.MIN / (data.TEAM_MIN / 5))\n",
    "    team_oreb_pct = data.TEAM_OREB / (data.TEAM_OREB + data.OPP_REB - data.OPP_OREB)\n",
    "    team_scoring_poss = data.TEAM_FGM + (1 - (1 - (data.TEAM_FTM / data.TEAM_FTA)) ** 2) * 0.4 * data.TEAM_FTA\n",
    "    team_play_pct = team_scoring_poss / (data.TEAM_FGA + 0.4 * data.TEAM_FTA + data.TEAM_TOV)\n",
    "    team_oreb_weight = ((1 - team_oreb_pct) * team_play_pct) / ((1 - team_oreb_pct) * team_play_pct +\n",
    "                                                                team_oreb_pct * (1 - team_play_pct))\n",
    "    fg_part = data.FGM * (1 - 0.5 * ((data.PTS - data.FTM) / (2 * data.FGA)) * q_ast)\n",
    "    ast_part = 0.5 * (((data.TEAM_PTS - data.TEAM_FTM) - (data.PTS - data.FTM)) /\n",
    "                      (2 * (data.TEAM_FGA - data.FGA))) * data.AST\n",
    "    ft_part = (1 - (1 - (data.FTM / data.FTA)) ** 2) * 0.4 * data.FTA\n",
    "    oreb_part = data.OREB * team_oreb_weight * team_play_pct\n",
    "    sc_poss = (fg_part + ast_part + ft_part) * \\\n",
    "              (1 - (data.TEAM_OREB / team_scoring_poss) * team_oreb_weight * team_play_pct) + oreb_part\n",
    "    fg_xposs = (data.FGA - data.FGM) * (1 - 1.07 * team_oreb_pct)\n",
    "    ft_xposs = ((1 - (data.FTM / data.FTA)) ** 2) * 0.4 * data.FTA\n",
    "    tot_poss = sc_poss + fg_xposs + ft_xposs + data.TOV\n",
    "    pprod_fg = 2 * (data.FGM + 0.5 * data.FG3M) * (1 - 0.5 * ((data.PTS - data.FTM) / (2 * data.FGA)) * q_ast)\n",
    "    pprod_ast = 2 * ((data.TEAM_FGM - data.FGM + 0.5 * (data.TEAM_FG3M - data.FG3M)) /\n",
    "                     (data.TEAM_FGM - data.FGM)) * 0.5 * ((data.TEAM_PTS - data.TEAM_FTM - (data.PTS - data.FTM)) /\n",
    "                                                          (2 * (data.TEAM_FGA - data.FGA))) * data.AST\n",
    "    pprod_oreb = data.OREB * team_oreb_weight * team_play_pct * \\\n",
    "        (data.TEAM_PTS / (data.TEAM_FGM + (1 - (1 - data.TEAM_FTM / data.TEAM_FTA) ** 2) * 0.4 * data.TEAM_FTA))\n",
    "    pprod = (pprod_fg + pprod_ast + data.FTM) * \\\n",
    "            (1 - (data.TEAM_OREB / team_scoring_poss) * team_oreb_weight * team_play_pct) + pprod_oreb\n",
    "    return 100 * pprod / tot_poss\n",
    "\n",
    "\n",
    "def pts_produced(data):\n",
    "    q_ast = data.MIN / (data.TEAM_MIN / 5) * 1.14 * (data.TEAM_AST - data.AST) / data.TEAM_FGM + \\\n",
    "            (((data.TEAM_AST / data.TEAM_MIN) * data.MIN * 5 - data.AST) /\n",
    "             ((data.TEAM_FGM / data.TEAM_MIN) * data.MIN * 5 - data.FGM)) * (1 - data.MIN / (data.TEAM_MIN / 5))\n",
    "    team_oreb_pct = data.TEAM_OREB / (data.TEAM_OREB + data.OPP_REB - data.OPP_OREB)\n",
    "    team_scoring_poss = data.TEAM_FGM + (1 - (1 - (data.TEAM_FTM / data.TEAM_FTA)) ** 2) * 0.4 * data.TEAM_FTA\n",
    "    team_play_pct = team_scoring_poss / (data.TEAM_FGA + 0.4 * data.TEAM_FTA + data.TEAM_TOV)\n",
    "    team_oreb_weight = ((1 - team_oreb_pct) * team_play_pct) / ((1 - team_oreb_pct) * team_play_pct +\n",
    "                                                                team_oreb_pct * (1 - team_play_pct))\n",
    "    pprod_fg = 2 * (data.FGM + 0.5 * data.FG3M) * (1 - 0.5 * ((data.PTS - data.FTM) / (2 * data.FGA)) * q_ast)\n",
    "    pprod_ast = 2 * ((data.TEAM_FGM - data.FGM + 0.5 * (data.TEAM_FG3M - data.FG3M)) /\n",
    "                     (data.TEAM_FGM - data.FGM)) * 0.5 * ((data.TEAM_PTS - data.TEAM_FTM - (data.PTS - data.FTM)) /\n",
    "                                                          (2 * (data.TEAM_FGA - data.FGA))) * data.AST\n",
    "    pprod_oreb = data.OREB * team_oreb_weight * team_play_pct * \\\n",
    "        (data.TEAM_PTS / (data.TEAM_FGM + (1 - (1 - data.TEAM_FTM / data.TEAM_FTA) ** 2) * 0.4 * data.TEAM_FTA))\n",
    "    return (pprod_fg + pprod_ast + data.FTM) * \\\n",
    "           (1 - (data.TEAM_OREB / team_scoring_poss) * team_oreb_weight * team_play_pct) + pprod_oreb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c3596791-149f-4af6-8869-7a298a85e7e0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
