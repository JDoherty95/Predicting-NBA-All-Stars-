{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a590f282-779e-4d84-9627-858c1c561370",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'databall'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/pb/9nrds4y576x41j1jw01gnkc40000gn/T/ipykernel_9075/980272123.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mdataball\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mstats\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mteam_stats\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'databall'"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from collections import namedtuple\n",
    "from itertools import product, starmap\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from databall import stats, team_stats\n",
    "\n",
    "\n",
    "class Database:\n",
    "    def __init__(self, database):\n",
    "        self.__conn = sqlite3.connect(database)\n",
    "\n",
    "        select = '''\n",
    "            SEASON,\n",
    "            home.GAME_ID as GAME_ID,\n",
    "            TEAM_ID,\n",
    "            TEAM_MIN, TEAM_FGM, TEAM_FGA, TEAM_FG3M, TEAM_FG3A, TEAM_FTM, TEAM_FTA, TEAM_OREB, TEAM_DREB, TEAM_REB,\n",
    "            TEAM_AST, TEAM_TOV, TEAM_STL, TEAM_BLK, TEAM_PTS, TEAM_PLUS_MINUS,\n",
    "            OPP_ID,\n",
    "            OPP_MIN, OPP_FGM, OPP_FGA, OPP_FG3M, OPP_FG3A, OPP_FTM, OPP_FTA, OPP_OREB, OPP_DREB, OPP_REB,\n",
    "            OPP_AST, OPP_TOV, OPP_STL, OPP_BLK, OPP_PTS, OPP_PLUS_MINUS,\n",
    "            HOME_WL\n",
    "        '''\n",
    "\n",
    "        team_stats_str = '''\n",
    "            games.SEASON,\n",
    "            GAME_ID,\n",
    "            TEAM_ID,\n",
    "            MIN AS TEAM_MIN,\n",
    "            FGM AS TEAM_FGM,\n",
    "            FGA AS TEAM_FGA,\n",
    "            FG3M AS TEAM_FG3M,\n",
    "            FG3A AS TEAM_FG3A,\n",
    "            FTM AS TEAM_FTM,\n",
    "            FTA AS TEAM_FTA,\n",
    "            OREB AS TEAM_OREB,\n",
    "            DREB AS TEAM_DREB,\n",
    "            REB AS TEAM_REB,\n",
    "            AST AS TEAM_AST,\n",
    "            TOV AS TEAM_TOV,\n",
    "            STL AS TEAM_STL,\n",
    "            BLK AS TEAM_BLK,\n",
    "            PTS AS TEAM_PTS,\n",
    "            PLUS_MINUS AS TEAM_PLUS_MINUS,\n",
    "            HOME_WL\n",
    "        '''\n",
    "\n",
    "        opp_stats_str = '''\n",
    "            GAME_ID,\n",
    "            TEAM_ID AS OPP_ID,\n",
    "            MIN AS OPP_MIN,\n",
    "            FGM AS OPP_FGM,\n",
    "            FGA AS OPP_FGA,\n",
    "            FG3M AS OPP_FG3M,\n",
    "            FG3A AS OPP_FG3A,\n",
    "            FTM AS OPP_FTM,\n",
    "            FTA AS OPP_FTA,\n",
    "            OREB AS OPP_OREB,\n",
    "            DREB AS OPP_DREB,\n",
    "            REB AS OPP_REB,\n",
    "            AST AS OPP_AST,\n",
    "            TOV AS OPP_TOV,\n",
    "            STL AS OPP_STL,\n",
    "            BLK AS OPP_BLK,\n",
    "            PTS AS OPP_PTS,\n",
    "            PLUS_MINUS AS OPP_PLUS_MINUS\n",
    "        '''\n",
    "\n",
    "        self.__game_query = '''\n",
    "            SELECT {0}\n",
    "            FROM\n",
    "                (SELECT {1}\n",
    "                    FROM team_game_stats\n",
    "                    JOIN games\n",
    "                    ON TEAM_ID = games.HOME_TEAM_ID AND GAME_ID = games.ID) as home,\n",
    "                (SELECT {2}\n",
    "                    FROM team_game_stats\n",
    "                    JOIN games\n",
    "                    ON OPP_ID = games.AWAY_TEAM_ID AND GAME_ID = games.ID) as away\n",
    "            WHERE home.GAME_ID = away.GAME_ID\n",
    "            UNION\n",
    "            SELECT {0}\n",
    "            FROM\n",
    "                (SELECT {1}\n",
    "                    FROM team_game_stats\n",
    "                    JOIN games\n",
    "                    ON TEAM_ID = games.AWAY_TEAM_ID AND GAME_ID = games.ID) as home,\n",
    "                (SELECT {2}\n",
    "                    FROM team_game_stats\n",
    "                    JOIN games\n",
    "                    ON OPP_ID = games.HOME_TEAM_ID AND GAME_ID = games.ID) as away\n",
    "            WHERE home.GAME_ID = away.GAME_ID\n",
    "        '''.format(select, team_stats_str, opp_stats_str)\n",
    "\n",
    "    def betting_stats(self, stat_names=None, window=None):\n",
    "        data = self.game_stats()\n",
    "        data['PACE'] = team_stats.pace(data)\n",
    "        data['POSSESSIONS'] = team_stats.possessions(data)\n",
    "        data['TEAM_OFF_RTG'] = team_stats.off_rating(data)\n",
    "        data['TEAM_DEF_RTG'] = team_stats.def_rating(data)\n",
    "        data['TEAM_NET_RTG'] = data['TEAM_OFF_RTG'] - data['TEAM_DEF_RTG']\n",
    "        data['TEAM_EFG'] = stats.eff_fg_pct(data, 'TEAM_')\n",
    "        data['TEAM_TOV_PCT'] = stats.tov_pct(data, 'TEAM_')\n",
    "        data['TEAM_OREB_PCT'] = team_stats.oreb_pct(data)\n",
    "        data['TEAM_DREB_PCT'] = team_stats.dreb_pct(data)\n",
    "        data['TEAM_FT_PER_FGA'] = stats.ft_per_fga(data, 'TEAM_')\n",
    "\n",
    "        efg = data.TEAM_EFG\n",
    "        oreb = data.TEAM_OREB_PCT\n",
    "        dreb = data.TEAM_DREB_PCT\n",
    "        ftr = data.TEAM_FT_PER_FGA\n",
    "        tov = data.TEAM_TOV_PCT\n",
    "\n",
    "        data['TEAM_FOUR_FACTORS'] = 0.4 * efg + 0.2 * oreb + 0.15 * ftr - 0.25 * tov\n",
    "        data['TEAM_FOUR_FACTORS_REB'] = 0.4 * efg + 0.1 * oreb + 0.1 * dreb + 0.15 * ftr - 0.25 * tov\n",
    "\n",
    "        if stat_names is None:\n",
    "            stat_names = ['FGM', 'FGA', 'FG3M', 'FG3A', 'FTM', 'FTA', 'OREB', 'DREB', 'REB', 'AST', 'TOV', 'STL', 'BLK']\n",
    "            stat_names = ['TEAM_' + s for s in stat_names] + ['OPP_' + s for s in stat_names] +\\\n",
    "                         ['TEAM_OFF_RTG', 'TEAM_DEF_RTG', 'TEAM_NET_RTG', 'TEAM_EFG', 'TEAM_TOV_PCT',\n",
    "                          'TEAM_OREB_PCT', 'TEAM_DREB_PCT', 'TEAM_FT_PER_FGA', 'TEAM_FOUR_FACTORS',\n",
    "                          'TEAM_FOUR_FACTORS_REB', 'PACE', 'POSSESSIONS']\n",
    "\n",
    "        data = data[['SEASON', 'GAME_ID', 'TEAM_ID'] + stat_names]\n",
    "        data = self.windowed_stats(data, stat_names, window=window)\n",
    "\n",
    "        games = pd.read_sql('SELECT * FROM games JOIN betting ON games.ID is betting.GAME_ID', self.__conn)\n",
    "        games = games.merge(data, left_on=['SEASON', 'ID', 'HOME_TEAM_ID'], right_on=['SEASON', 'GAME_ID', 'TEAM_ID'])\n",
    "        games = games.merge(data, left_on=['SEASON', 'ID', 'AWAY_TEAM_ID'], right_on=['SEASON', 'GAME_ID', 'TEAM_ID'],\n",
    "                            suffixes=('', '_AWAY'))\n",
    "        games = games[games.HOME_SPREAD_WL != 'P']\n",
    "\n",
    "        return games\n",
    "\n",
    "    def game_stats(self):\n",
    "        return pd.read_sql(self.__game_query, self.__conn)\n",
    "\n",
    "    def season_stats(self):\n",
    "        query = '''\n",
    "            SELECT SEASON,\n",
    "                   TEAM_ID,\n",
    "                   AVG(TEAM_MIN) AS TEAM_MIN,\n",
    "                   AVG(TEAM_FGM) AS TEAM_FGM,\n",
    "                   AVG(TEAM_FGA) AS TEAM_FGA,\n",
    "                   AVG(TEAM_FG3M) AS TEAM_FG3M,\n",
    "                   AVG(TEAM_FG3A) AS TEAM_FG3A,\n",
    "                   AVG(TEAM_FTM) AS TEAM_FTM,\n",
    "                   AVG(TEAM_FTA) AS TEAM_FTA,\n",
    "                   AVG(TEAM_OREB) AS TEAM_OREB,\n",
    "                   AVG(TEAM_DREB) AS TEAM_DREB,\n",
    "                   AVG(TEAM_REB) AS TEAM_REB,\n",
    "                   AVG(TEAM_AST) AS TEAM_AST,\n",
    "                   AVG(TEAM_TOV) AS TEAM_TOV,\n",
    "                   AVG(TEAM_STL) AS TEAM_STL,\n",
    "                   AVG(TEAM_BLK) AS TEAM_BLK,\n",
    "                   AVG(TEAM_PTS) AS TEAM_PTS,\n",
    "                   AVG(TEAM_PLUS_MINUS) AS TEAM_PLUS_MINUS,\n",
    "                   AVG(OPP_MIN) AS OPP_MIN,\n",
    "                   AVG(OPP_FGM) AS OPP_FGM,\n",
    "                   AVG(OPP_FGA) AS OPP_FGA,\n",
    "                   AVG(OPP_FG3M) AS OPP_FG3M,\n",
    "                   AVG(OPP_FG3A) AS OPP_FG3A,\n",
    "                   AVG(OPP_FTM) AS OPP_FTM,\n",
    "                   AVG(OPP_FTA) AS OPP_FTA,\n",
    "                   AVG(OPP_OREB) AS OPP_OREB,\n",
    "                   AVG(OPP_DREB) AS OPP_DREB,\n",
    "                   AVG(OPP_REB) AS OPP_REB,\n",
    "                   AVG(OPP_AST) AS OPP_AST,\n",
    "                   AVG(OPP_TOV) AS OPP_TOV,\n",
    "                   AVG(OPP_STL) AS OPP_STL,\n",
    "                   AVG(OPP_BLK) AS OPP_BLK,\n",
    "                   AVG(OPP_PTS) AS OPP_PTS,\n",
    "                   AVG(OPP_PLUS_MINUS) AS OPP_PLUS_MINUS\n",
    "            FROM\n",
    "                ({})\n",
    "            GROUP BY SEASON, TEAM_ID\n",
    "        '''.format(self.__game_query)\n",
    "\n",
    "        data = pd.read_sql(query, self.__conn)\n",
    "        data['PACE'] = team_stats.pace(data)\n",
    "        data['POSSESSIONS'] = team_stats.possessions(data)\n",
    "        data['TEAM_OFF_RTG'] = team_stats.off_rating(data)\n",
    "        data['TEAM_DEF_RTG'] = team_stats.def_rating(data)\n",
    "        data['TEAM_NET_RTG'] = data['TEAM_OFF_RTG'] - data['TEAM_DEF_RTG']\n",
    "        data['TEAM_EFG'] = stats.eff_fg_pct(data, 'TEAM_')\n",
    "        data['TEAM_TOV_PCT'] = stats.tov_pct(data, 'TEAM_')\n",
    "        data['TEAM_OREB_PCT'] = team_stats.oreb_pct(data)\n",
    "        data['TEAM_DREB_PCT'] = team_stats.dreb_pct(data)\n",
    "        data['TEAM_FT_PER_FGA'] = stats.ft_per_fga(data, 'TEAM_')\n",
    "\n",
    "        efg = data.TEAM_EFG\n",
    "        oreb = data.TEAM_OREB_PCT\n",
    "        dreb = data.TEAM_DREB_PCT\n",
    "        ftr = data.TEAM_FT_PER_FGA\n",
    "        tov = data.TEAM_TOV_PCT\n",
    "\n",
    "        data['TEAM_FOUR_FACTORS'] = 0.4 * efg + 0.2 * oreb + 0.15 * ftr - 0.25 * tov\n",
    "        data['TEAM_FOUR_FACTORS_REB'] = 0.4 * efg + 0.1 * oreb + 0.1 * dreb + 0.15 * ftr - 0.25 * tov\n",
    "\n",
    "        query = '''\n",
    "            SELECT SEASON, TEAM_ID, OPP_ID, COUNT(OPP_ID) AS GAMES_PLAYED\n",
    "            FROM\n",
    "                ({})\n",
    "            GROUP BY SEASON, TEAM_ID, OPP_ID\n",
    "        '''.format(self.__game_query)\n",
    "\n",
    "        opponents = pd.read_sql(query, self.__conn)\n",
    "\n",
    "        for season in pd.unique(data.SEASON):\n",
    "            season_opponents = opponents[opponents.SEASON == season]\n",
    "            teams = pd.unique(season_opponents.TEAM_ID)\n",
    "            schedule = np.zeros([len(teams), len(teams)])\n",
    "\n",
    "            for team in teams:\n",
    "                index = np.array([x in season_opponents[season_opponents.TEAM_ID == team].OPP_ID.values for x in teams])\n",
    "                schedule[team == teams, index] = season_opponents[season_opponents.TEAM_ID == team].GAMES_PLAYED\n",
    "\n",
    "            schedule /= sum(season_opponents.GAMES_PLAYED) / len(teams)\n",
    "            point_diff = data[data.SEASON == season].TEAM_PLUS_MINUS.values\n",
    "            srs = point_diff\n",
    "\n",
    "            for i in range(10):\n",
    "                srs = point_diff + schedule.dot(srs)\n",
    "\n",
    "            data.loc[data.SEASON == season, 'TEAM_SRS'] = srs\n",
    "\n",
    "        return data\n",
    "\n",
    "    # data = DataFrame to average over\n",
    "    # stat_names = list of stats that should be averaged and shifted\n",
    "    # window = number of games to average, None indicates all games are used\n",
    "    # weighted = whether or not recent games are weighted more heavily\n",
    "    def windowed_stats(self, data, stat_names, window=None, weighted=False):\n",
    "        data = data.copy()\n",
    "        seasons = data.SEASON.unique()[1:]\n",
    "        teams = data.TEAM_ID.unique()\n",
    "        grouped = data.groupby(['SEASON', 'TEAM_ID'])\n",
    "        keys = grouped.groups.keys()\n",
    "        team_season = namedtuple('team_season', ['season', 'team'])\n",
    "\n",
    "        for group in starmap(team_season, [x for x in product(seasons, teams) if x in keys]):\n",
    "            g = grouped.get_group(group)\n",
    "            sub = g[stat_names].expanding().mean()\n",
    "\n",
    "            if window is not None:\n",
    "                roll = g[stat_names].rolling(window=window).mean()\n",
    "                sub = sub[:window - 1].append(roll[window - 1:])\n",
    "\n",
    "            # Shift stats down one game so only previous information is used\n",
    "            sub = sub.shift(1)\n",
    "\n",
    "            # Fill in first game with average of previous season\n",
    "            previous = (group.season - 1, group.team)\n",
    "\n",
    "            if previous in keys:\n",
    "                sub.iloc[0] = grouped.get_group(previous)[stat_names].mean()\n",
    "\n",
    "            # Store subset in full DataFrame\n",
    "            data.loc[sub.index, stat_names] = sub\n",
    "\n",
    "        return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d2697a9-6634-4baf-b047-606e6aa59989",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
