{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "45dcdd70-2c12-4b04-a142-c428c84ade71",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import sqlite3\n",
    "import time\n",
    "\n",
    "import pandas as pd\n",
    "from nba_api.stats.endpoints.leaguedashplayerstats import LeagueDashPlayerStats\n",
    "from nba_api.stats.endpoints.leaguedashteamstats import LeagueDashTeamStats\n",
    "from nba_api.stats.endpoints.leaguegamelog import LeagueGameLog\n",
    "from nba_api.stats.static import teams as TEAMS\n",
    "\n",
    "\n",
    "def add_player_game_stats(conn, start_season, end_season, if_exists='append', sleep=1):\n",
    "    table_name = 'player_game_stats'\n",
    "\n",
    "    if if_exists == 'replace':\n",
    "        conn.execute('DROP TABLE IF EXISTS ' + table_name)\n",
    "        conn.execute('DROP TABLE IF EXISTS players')\n",
    "\n",
    "    conn.execute('''CREATE TABLE IF NOT EXISTS {} (PLAYER_ID INTEGER, TEAM_ID INTEGER, GAME_ID TEXT, MIN INTEGER,\n",
    "        FGM INTEGER, FGA INTEGER, FG3M INTEGER, FG3A INTEGER, FTM INTEGER, FTA INTEGER, OREB INTEGER, DREB INTEGER,\n",
    "        REB INTEGER, AST INTEGER, STL INTEGER, BLK INTEGER, TOV INTEGER, PF INTEGER, PTS INTEGER, PLUS_MINUS INTEGER)'''\n",
    "                 .format(table_name))\n",
    "\n",
    "    conn.execute('CREATE TABLE IF NOT EXISTS players (ID INTEGER, NAME TEXT)')\n",
    "\n",
    "    for season in range(start_season, end_season + 1):\n",
    "        print('Reading ' + season_str(season) + ' player game stats')\n",
    "        table = LeagueGameLog(season=season_str(season), player_or_team_abbreviation='P').get_data_frames()[0]\n",
    "        table.to_sql('temp', conn, if_exists='append', index=False)\n",
    "        labels = ['ABBREV', 'DATE', 'MATCHUP', 'NAME', 'PCT', 'SEASON', 'VIDEO', 'WL']\n",
    "        table.drop(labels_to_drop(table.columns, labels), axis=1, inplace=True)\n",
    "        table.dropna(axis=0, how='any', subset=['GAME_ID', 'PLAYER_ID', 'TEAM_ID'], inplace=True)\n",
    "        table.to_sql(table_name, conn, if_exists='append', index=False)\n",
    "        time.sleep(sleep)\n",
    "\n",
    "    query = 'SELECT DISTINCT PLAYER_ID AS ID, PLAYER_NAME AS NAME FROM temp ORDER BY ID'\n",
    "    pd.read_sql(query, conn).to_sql('players', conn, if_exists='append', index=False)\n",
    "    conn.execute('DROP TABLE temp')\n",
    "    conn.execute('VACUUM')\n",
    "\n",
    "\n",
    "def add_player_season_stats(conn, start_season, end_season, if_exists='append', sleep=1):\n",
    "    table_name = 'player_season_stats'\n",
    "\n",
    "    if if_exists == 'replace':\n",
    "        conn.execute('DROP TABLE IF EXISTS ' + table_name)\n",
    "        conn.execute('VACUUM')\n",
    "\n",
    "    conn.execute('''CREATE TABLE IF NOT EXISTS {} (SEASON INTEGER, PLAYER_ID INTEGER, TEAM_ID INTEGER, AGE REAL,\n",
    "        GP INTEGER, W INTEGER, L INTEGER, W_PCT REAL, MIN REAL, FGM REAL, FGA REAL, FG_PCT REAL, FG3M REAL, FG3A REAL,\n",
    "        FG3_PCT REAL, FTM REAL, FTA REAL, FT_PCT REAL, OREB REAL, DREB REAL, REB REAL, AST REAL, TOV REAL, STL REAL,\n",
    "        BLK REAL, BLKA REAL, PF REAL, PFD REAL, PTS REAL, PLUS_MINUS REAL, DD2 INTEGER, TD3 INTEGER)'''\n",
    "                 .format(table_name))\n",
    "\n",
    "    for season in range(start_season, end_season + 1):\n",
    "        print('Reading ' + season_str(season) + ' player season stats')\n",
    "        table = LeagueDashPlayerStats(season=season_str(season)).get_data_frames()[0]\n",
    "        labels = ['ABBREV', 'CF', 'NAME', 'NBA_FANTASY_PTS', 'RANK']\n",
    "        table.drop(labels_to_drop(table.columns, labels), axis=1, inplace=True)\n",
    "        table.dropna(axis=0, how='any', subset=['PLAYER_ID', 'TEAM_ID'], inplace=True)\n",
    "        table['SEASON'] = season\n",
    "        table.to_sql(table_name, conn, if_exists='append', index=False)\n",
    "        time.sleep(sleep)\n",
    "\n",
    "\n",
    "def add_teams(conn):\n",
    "    print('Reading team information')\n",
    "    conn.execute('DROP TABLE IF EXISTS teams')\n",
    "    conn.execute('VACUUM')\n",
    "    conn.execute('CREATE TABLE teams (ID INTEGER, ABBREVIATION TEXT, MASCOT TEXT, NAME TEXT, CITY TEXT, STATE TEXT, YEAR INTEGER)')\n",
    "    teams = TEAMS.get_teams()\n",
    "    teams = json.dumps(teams)\n",
    "    teams = pd.read_json(teams)\n",
    "    teams.rename(columns={'full_name': 'NAME', 'nickname': 'MASCOT', 'year_founded': 'YEAR'}, inplace=True)\n",
    "    teams.to_sql('teams', conn, if_exists='append', index=False)\n",
    "\n",
    "\n",
    "def add_team_game_stats(conn, start_season, end_season, if_exists='append', sleep=1):\n",
    "    table_name = 'team_game_stats'\n",
    "\n",
    "    if if_exists == 'replace':\n",
    "        conn.execute('DROP TABLE IF EXISTS ' + table_name)\n",
    "        conn.execute('DROP TABLE IF EXISTS games')\n",
    "\n",
    "    conn.execute('''CREATE TABLE IF NOT EXISTS {} (TEAM_ID INTEGER, GAME_ID TEXT, MIN INTEGER, FGM INTEGER, FGA INTEGER,\n",
    "        FG3M INTEGER, FG3A INTEGER, FTM INTEGER, FTA INTEGER, OREB INTEGER, DREB INTEGER, REB INTEGER, AST INTEGER,\n",
    "        STL INTEGER, BLK INTEGER, TOV INTEGER, PF INTEGER, PTS INTEGER, PLUS_MINUS INTEGER)'''.format(table_name))\n",
    "\n",
    "    conn.execute('''CREATE TABLE IF NOT EXISTS games (SEASON INTEGER, ID TEXT, HOME_TEAM_ID INTEGER,\n",
    "        AWAY_TEAM_ID INTEGER, GAME_DATE TEXT, MATCHUP TEXT, HOME_WL TEXT)''')\n",
    "\n",
    "    for season in range(start_season, end_season + 1):\n",
    "        print('Reading ' + season_str(season) + ' team game stats')\n",
    "        table = LeagueGameLog(season=season_str(season), player_or_team_abbreviation='T').get_data_frames()[0]\n",
    "        table['SEASON'] = season\n",
    "        table.to_sql('temp', conn, if_exists='append', index=False)\n",
    "        labels = ['ABBREV', 'DATE', 'MATCHUP', 'NAME', 'PCT', 'SEASON', 'VIDEO', 'WL']\n",
    "        table.drop(labels_to_drop(table.columns, labels), axis=1, inplace=True)\n",
    "        table.dropna(axis=0, how='any', subset=['GAME_ID', 'TEAM_ID'], inplace=True)\n",
    "        table.to_sql(table_name, conn, if_exists='append', index=False)\n",
    "        time.sleep(sleep)\n",
    "\n",
    "    query = '''\n",
    "    SELECT SEASON,\n",
    "           ID,\n",
    "           HOME_TEAM_ID,\n",
    "           AWAY_TEAM_ID,\n",
    "           GAME_DATE,\n",
    "           MATCHUP,\n",
    "           HOME_WL\n",
    "    FROM\n",
    "        (SELECT TEAM_ID AS HOME_TEAM_ID,\n",
    "                GAME_ID AS ID,\n",
    "                SEASON,\n",
    "                GAME_DATE,\n",
    "                MATCHUP,\n",
    "                WL AS HOME_WL\n",
    "            FROM temp\n",
    "            WHERE MATCHUP LIKE '%vs%') AS home,\n",
    "        (SELECT TEAM_ID AS AWAY_TEAM_ID,\n",
    "                GAME_ID\n",
    "            FROM temp\n",
    "            WHERE MATCHUP LIKE '%@%') AS away\n",
    "    WHERE home.ID = away.GAME_ID\n",
    "    '''\n",
    "    pd.read_sql(query, conn).to_sql('games', conn, if_exists='append', index=False)\n",
    "    conn.execute('DROP TABLE temp')\n",
    "    conn.execute('VACUUM')\n",
    "\n",
    "\n",
    "def add_team_season_stats(conn, start_season, end_season, if_exists='append', sleep=1):\n",
    "    table_name = 'team_season_stats'\n",
    "\n",
    "    if if_exists == 'replace':\n",
    "        conn.execute('DROP TABLE IF EXISTS ' + table_name)\n",
    "        conn.execute('VACUUM')\n",
    "\n",
    "    conn.execute('''CREATE TABLE IF NOT EXISTS {} (SEASON INTEGER, TEAM_ID INTEGER, GP INTEGER, W INTEGER, L INTEGER,\n",
    "        W_PCT REAL, MIN REAL, FGM REAL, FGA REAL, FG_PCT REAL, FG3M REAL, FG3A REAL, FG3_PCT REAL, FTM REAL, FTA REAL,\n",
    "        FT_PCT REAL, OREB REAL, DREB REAL, REB REAL, AST REAL, TOV REAL, STL REAL, BLK REAL, BLKA REAL, PF REAL,\n",
    "        PFD REAL, PTS REAL, PLUS_MINUS REAL)'''.format(table_name))\n",
    "\n",
    "    for season in range(start_season, end_season + 1):\n",
    "        print('Reading ' + season_str(season) + ' team season stats')\n",
    "        table = LeagueDashTeamStats(season=season_str(season)).get_data_frames()[0]\n",
    "        labels = ['CF', 'NAME', 'RANK']\n",
    "        table.drop(labels_to_drop(table.columns, labels), axis=1, inplace=True)\n",
    "        table.dropna(axis=0, how='any', subset=['TEAM_ID'], inplace=True)\n",
    "        table['SEASON'] = season\n",
    "        table.to_sql(table_name, conn, if_exists='append', index=False)\n",
    "        time.sleep(sleep)\n",
    "\n",
    "\n",
    "def build_database(database, start_season, end_season, if_exists='replace', sleep=1):\n",
    "    conn = sqlite3.connect(database)\n",
    "\n",
    "    if if_exists == 'replace':\n",
    "        add_teams(conn)\n",
    "\n",
    "    add_player_game_stats(conn, start_season, end_season, if_exists, sleep)\n",
    "    add_player_season_stats(conn, start_season, end_season, if_exists, sleep)\n",
    "    add_team_game_stats(conn, start_season, end_season, if_exists, sleep)\n",
    "    add_team_season_stats(conn, start_season, end_season, if_exists, sleep)\n",
    "    conn.close()\n",
    "\n",
    "\n",
    "def labels_to_drop(column_names, list_of_strings):\n",
    "    return [col for col in column_names if any([x for x in list_of_strings if x in col])]\n",
    "\n",
    "\n",
    "def season_str(season):\n",
    "    return str(season) + '-' + str(season+1)[-2:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42657432-f333-415a-a1f0-2f7fb9c33044",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
