{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "027293a3-19e9-4bd2-914a-6ba900ec4159",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from time import sleep\n",
    "\n",
    "\n",
    "class Scrapper():\n",
    "    \"\"\"\n",
    "    Class to simplify scrapping on website and API.\n",
    "    \"\"\"\n",
    "\n",
    "    DEFAULT_HEADER = {\n",
    "        'Host': 'stats.nba.com',\n",
    "        'Referer': 'https://stats.nba.com',\n",
    "        'Origin': 'https://stats.nba.com',\n",
    "        'x-nba-stats-token': 'true',\n",
    "        'x-nba-stats-origin': 'stats',\n",
    "        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36',\n",
    "        'Accept': 'application/json, text/plain, */*',\n",
    "        'Accept-Language': 'en-GB,en;q=0.5',\n",
    "        'Accept-Encoding': 'gzip, deflate, br',\n",
    "        'X-NewRelic-ID': 'VQECWF5UChAHUlNTBwgBVw==',\n",
    "        'Cache-Control': 'max-age=0'\n",
    "    }\n",
    "\n",
    "    def __init__(self, headers=None, max_call_errors=None):\n",
    "        self.headers = self.DEFAULT_HEADER if headers == None else headers\n",
    "        self.max_call_errors = max_call_errors\n",
    "\n",
    "    def repeat_call_while_error(self, url):\n",
    "        response = requests.get(url, headers=self.headers)\n",
    "        errors_cnt = 0\n",
    "        while not response.status_code != 200 & errors_cnt < self.max_call_errors:\n",
    "            print('Response :',response.status_code)\n",
    "            errors_cnt += 1\n",
    "            sleep(1)\n",
    "            response = requests.get(url, headers=self.headers)\n",
    "\n",
    "        if errors_cnt == self.max_call_errors:\n",
    "            return None\n",
    "\n",
    "        return response\n",
    "\n",
    "    def call_url(self, url):\n",
    "        self.headers['Referer'] = url\n",
    "        # self.headers['Origin'] = url\n",
    "        \n",
    "        response = requests.get(url, headers=self.headers)\n",
    "        print('Response :',response.status_code)\n",
    "\n",
    "        if response.status_code != 200:\n",
    "            if self.max_call_errors != None:\n",
    "                response = self.repeat_call_while_error(url=url)\n",
    "\n",
    "            if response == None:\n",
    "                return None\n",
    "\n",
    "        return response\n",
    "\n",
    "    def retrieve_json_api_from_url(self, url):\n",
    "        response = self.call_url(url=url)\n",
    "\n",
    "        if response == None:\n",
    "            return None\n",
    "\n",
    "        if response.status_code != 200:\n",
    "            print('Error code : %i'%response.status_code)\n",
    "            return None\n",
    "\n",
    "        return response.json()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
