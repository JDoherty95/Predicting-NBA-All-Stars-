{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4fd8cb61-dcab-4b59-b2e7-3de480530f26",
   "metadata": {},
   "outputs": [],
   "source": [
    "# makePastPredictions.py - Used to predicts specified range of past NBA Games\n",
    "\n",
    "import pickle\n",
    "import pandas as pd\n",
    "\n",
    "from createModel import getTrainingSet, createDataFrame\n",
    "from configureCWD import setCurrentWorkingDirectory\n",
    "\n",
    "\n",
    "# Exports game information for all games between specified time period to 'Data' Folder within project\n",
    "# End date will not be included in range\n",
    "# season must be in form 'yyyy-yy' and startDateOfSeason must be in form 'mm/dd/yyyy'\n",
    "# filename must end in '.csv'\n",
    "def getTrainingSetCSV(startYear, startMonth, startDay, endYear, endMonth, endDay, season, startDateOfSeason, filename='gamesWithInfo.csv'):\n",
    "\n",
    "    # Gets date, teams, and z-score difs for every game within range\n",
    "    rangeOfGames = getTrainingSet(startYear, startMonth, startDay, endYear, endMonth, endDay, season, startDateOfSeason)\n",
    "    rangeOfGamesDataframe = createDataFrame(rangeOfGames)\n",
    "\n",
    "    setCurrentWorkingDirectory('Data')\n",
    "\n",
    "    rangeOfGamesDataframe.to_csv(filename)\n",
    "\n",
    "\n",
    "# Creates a csv file that gives predictions for range of games\n",
    "# Prints accuracy of model in predicting games for specified range\n",
    "# gameDataFilename and outputFilename must be '.csv' files\n",
    "def getPredictionsCSV(gameDataFilename, outputFilename):\n",
    "\n",
    "    setCurrentWorkingDirectory('Data')\n",
    "\n",
    "    gamesWithZScoreDifs = pd.read_csv(gameDataFilename)\n",
    "\n",
    "    withoutNums = gamesWithZScoreDifs.loc[:, 'Home':'Date']  # Slices dataframe to only includes home through date\n",
    "    justZScoreDifs = gamesWithZScoreDifs.loc[:, 'W_PCT':'TS_PCT']  # Slices dataframe to only include statistical differences\n",
    "\n",
    "    setCurrentWorkingDirectory('SavedModels')\n",
    "    with open('finalized_model.pkl', 'rb') as file:  # Change filename here if model is named differently\n",
    "        pickleModel = pickle.load(file)\n",
    "\n",
    "    predictions = pickleModel.predict(justZScoreDifs)  # Creates list of predicted winners and losers\n",
    "    probPredictions = pickleModel.predict_proba(justZScoreDifs)  # Creates list of probabilities that home team wins\n",
    "\n",
    "    numCorrect = 0\n",
    "    numWrong = 0\n",
    "    allGames = []\n",
    "\n",
    "    for i in range(len(probPredictions)):\n",
    "\n",
    "        winProbability = probPredictions[i][1]\n",
    "        homeTeam = withoutNums.iloc[i, 0]\n",
    "        awayTeam = withoutNums.iloc[i, 1]\n",
    "        date = withoutNums.iloc[i, 10]\n",
    "\n",
    "        currentGameWithPred = [date, homeTeam, awayTeam, winProbability]\n",
    "\n",
    "        allGames.append(currentGameWithPred)\n",
    "\n",
    "        # Creates dataframe that holds all games info and predictions\n",
    "        predictionsDF = pd.DataFrame(\n",
    "            allGames,\n",
    "            columns=['Date', 'Home', 'Away', 'Home Team Win Probability']\n",
    "        )\n",
    "\n",
    "        setCurrentWorkingDirectory('Data')\n",
    "        predictionsDF.to_csv(outputFilename)  # Saves game info with predictions in data folder as csv file\n",
    "\n",
    "        value = withoutNums.iloc[i,9]\n",
    "        if value == predictions[i]:\n",
    "            numCorrect += 1\n",
    "        else :\n",
    "            numWrong += 1\n",
    "\n",
    "    print('Accuracy:')\n",
    "    print((numCorrect)/(numCorrect+numWrong))  # Prints accuracy of model in predicting games for specified range\n",
    "\n",
    "\n",
    "# Generates probability predictions over specified range of games exports them to a csv with game info\n",
    "# gameDataFilename and outputFilename must end in '.csv'\n",
    "# season must be in form 'yyyy-yy' and startDateOfSeason must be in form 'mm/dd/yyyy'\n",
    "def makePastPredictions(startYear, startMonth, startDay, endYear, endMonth, endDay, season, startDateOfSeason,\n",
    "                       gameDataFilename='gamesWithInfo.csv', outputFilename='predictions.csv'):\n",
    "\n",
    "    # Obtains info for range of games\n",
    "    getTrainingSetCSV(startYear, startMonth, startDay, endYear, endMonth, endDay, season, startDateOfSeason,\n",
    "                          gameDataFilename)\n",
    "    # Makes probabilities for range of games\n",
    "    getPredictionsCSV(gameDataFilename, outputFilename)\n",
    "\n",
    "\n",
    "# start date (yyyy, m, d) (must be at least three days after start of season), end date (yyyy, m, d) (non-inclusive),\n",
    "# season(yyyy-yy), start date of season (mm/dd/yyyy), .csv filename for games with z score differences,\n",
    "# .csv filename for games with predictions\n",
    "# EDIT THIS\n",
    "makePastPredictions(2018, 12, 28, 2019, 1, 13, '2018-19', '10/16/2018',\n",
    "                    'gamesWithInfo.csv', 'predictions.csv')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
