{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2f0cc200-6af2-41db-905e-2a7aa8915a14",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'null' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/pb/9nrds4y576x41j1jw01gnkc40000gn/T/ipykernel_5320/2392044158.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mgetDailyMatchups\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdailyMatchupsPresent\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mcreateModel\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcreateMeanStandardDeviationDicts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mzScoreDifferential\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mavailableStats\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mavailableStats\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/Desktop/BOOTCAMP/Project 2 folder/getDailyMatchups.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m    125\u001b[0m   {\n\u001b[1;32m    126\u001b[0m    \u001b[0;34m\"cell_type\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m\"code\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m    \u001b[0;34m\"execution_count\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnull\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    128\u001b[0m    \u001b[0;34m\"id\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m\"075e7f94-3f1e-4559-a590-771266228c48\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m    \u001b[0;34m\"metadata\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'null' is not defined"
     ]
    }
   ],
   "source": [
    "# nbaPredict.py - Predicts results of NBA games on a specified date\n",
    "# Call makeInterpretPrediction with current date, season, and start date of season to run predictions\n",
    "\n",
    "import pickle\n",
    "import pandas as pd\n",
    "\n",
    "from getDailyMatchups import dailyMatchupsPresent\n",
    "from createModel import createMeanStandardDeviationDicts, zScoreDifferential\n",
    "from availableStats import availableStats\n",
    "from getStats import getStatsForTeam\n",
    "from configureCWD import setCurrentWorkingDirectory\n",
    "\n",
    "\n",
    "# Returns list of games with Z-Score differentials between teams to be put into a Pandas dataframe\n",
    "# startDate & endDate should be 'mm/dd/yyyy' form\n",
    "def dailyGamesDataFrame(dailyGames, meanDict, standardDeviationDict, startDate, endDate, season):\n",
    "\n",
    "    fullDataFrame = []\n",
    "\n",
    "    for homeTeam,awayTeam in dailyGames.items():\n",
    "\n",
    "        homeTeamStats = getStatsForTeam(homeTeam, startDate, endDate, season)\n",
    "        awayTeamStats = getStatsForTeam(awayTeam, startDate, endDate, season)\n",
    "\n",
    "        currentGame = [homeTeam,awayTeam]\n",
    "\n",
    "        for stat,statType in availableStats.items():  # Finds Z Score Dif for stats listed above and adds them to list\n",
    "            zScoreDif = zScoreDifferential(homeTeamStats[stat], awayTeamStats[stat], meanDict[stat], standardDeviationDict[stat])\n",
    "            currentGame.append(zScoreDif)\n",
    "\n",
    "        fullDataFrame.append(currentGame)  # Adds this list to list of all games on specified date\n",
    "\n",
    "    return(fullDataFrame)\n",
    "\n",
    "\n",
    "# Returns a list\n",
    "# Index 0 is the dailyGames in dict form {Home:Away}\n",
    "# Index 1 is a list with the prediction probabilities for each game [[lossProb, winProb]]\n",
    "# currentDate should be in form 'mm/dd/yyyy' and season in form 'yyyy-yy'\n",
    "def predictDailyGames(currentDate, season, startOfSeason):\n",
    "\n",
    "    dailyGames = dailyMatchupsPresent(currentDate)  # Gets all games for specified date\n",
    "    meanDict, standardDeviationDict = createMeanStandardDeviationDicts(startOfSeason, currentDate, season)\n",
    "    dailyGamesList = dailyGamesDataFrame(dailyGames, meanDict, standardDeviationDict, startOfSeason, currentDate, season)\n",
    "\n",
    "    # Pandas dataframe holding daily games and Z-Score differentials between teams\n",
    "    gamesWithZScoreDifs = pd.DataFrame(\n",
    "        dailyGamesList,\n",
    "        columns=['Home', 'Away', 'W_PCT', 'REB', 'TOV', 'PLUS_MINUS', 'OFF_RATING', 'DEF_RATING', 'TS_PCT']\n",
    "    )\n",
    "\n",
    "    justZScoreDifs = gamesWithZScoreDifs.loc[:,'W_PCT':'TS_PCT']  # Slices only the features used in the model\n",
    "\n",
    "    with open('finalized_model.pkl', 'rb') as file:  # Change filename here if model is named differently\n",
    "        pickleModel = pickle.load(file)\n",
    "\n",
    "    predictions = pickleModel.predict_proba(justZScoreDifs)  # Predicts the probability that the home team loses/wins\n",
    "\n",
    "    gamesWithPredictions = [dailyGames, predictions]\n",
    "    return gamesWithPredictions\n",
    "\n",
    "\n",
    "# Returns the percent chance that the home team will defeat the away team for each game\n",
    "# gamesWithPredictions should be in form [dailyGames, predictionsList]\n",
    "def interpretPredictions(gamesWithPredictions):\n",
    "\n",
    "    dailyGames = gamesWithPredictions[0]  # Dict holding daily matchups\n",
    "    probabilityPredictions = gamesWithPredictions[1]  # List of lists holding probs of loss/win for home team\n",
    "\n",
    "    for gameNum in range(len(probabilityPredictions)):  # Loops through each game\n",
    "        winProb = probabilityPredictions[gameNum][1]\n",
    "        winProbRounded = round(winProb,4)\n",
    "        winProbPercent = \"{:.2%}\".format(winProbRounded)  # Formulates percent chance that home team wins\n",
    "\n",
    "        homeTeam = list(dailyGames.keys())[gameNum]\n",
    "        awayTeam = list(dailyGames.values())[gameNum]\n",
    "\n",
    "        print('There is a ' + winProbPercent + ' chance that the ' + homeTeam + ' will defeat the ' + awayTeam + '.')\n",
    "\n",
    "\n",
    "# Fetches games on set date and returns predictions for each game\n",
    "# currentDate/startOfSeason should be in form 'mm/dd/yyyy' and season in form 'yyyy-yy'\n",
    "# Start of 2019-20 season was 10/2/2019\n",
    "def makeInterpretPredictions(currentDate, season, startOfSeason):\n",
    "\n",
    "    setCurrentWorkingDirectory('SavedModels')\n",
    "\n",
    "    print('Predictions for ' + currentDate + ':')\n",
    "    predictions = predictDailyGames(currentDate, season, startOfSeason)\n",
    "    interpretPredictions(predictions)\n",
    "\n",
    "\n",
    "# EDIT THIS\n",
    "# First arg is date to predict (mm/dd/yyyy), second is season (yyyy-yy), and third is start date of season (mm/dd/yyyy)\n",
    "makeInterpretPredictions('01/04/2020', '2019-20', '10/22/2019')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa8a03d3-bc49-4791-a59a-728858bcc494",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "821a2976-65fe-4b85-9062-ded6711af345",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
