{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "97d38978-e0d6-4870-bb98-976ea30eebcc",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'games_no_dup.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/pb/9nrds4y576x41j1jw01gnkc40000gn/T/ipykernel_13893/2970263213.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilterwarnings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'ignore'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mgames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'games_no_dup.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mranking\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'ranking.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mteams\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'teams.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    584\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    810\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 811\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    813\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1038\u001b[0m             )\n\u001b[1;32m   1039\u001b[0m         \u001b[0;31m# error: Too many arguments for \"ParserBase\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1040\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmapping\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_failover_to_python\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0;31m# open handles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_handles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/base_parser.py\u001b[0m in \u001b[0;36m_open_handles\u001b[0;34m(self, src, kwds)\u001b[0m\n\u001b[1;32m    220\u001b[0m         \u001b[0mLet\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mreaders\u001b[0m \u001b[0mopen\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0mafter\u001b[0m \u001b[0mthey\u001b[0m \u001b[0mare\u001b[0m \u001b[0mdone\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mtheir\u001b[0m \u001b[0mpotential\u001b[0m \u001b[0mraises\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    221\u001b[0m         \"\"\"\n\u001b[0;32m--> 222\u001b[0;31m         self.handles = get_handle(\n\u001b[0m\u001b[1;32m    223\u001b[0m             \u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m             \u001b[0;34m\"r\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    700\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    701\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 702\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    703\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    704\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'games_no_dup.csv'"
     ]
    }
   ],
   "source": [
    "from time import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "games = pd.read_csv('games_no_dup.csv')\n",
    "ranking = pd.read_csv('ranking.csv')\n",
    "teams = pd.read_csv('teams.csv')\n",
    "games_detail = pd.read_csv('games_details.csv')\n",
    "\n",
    "print(games_detail.shape, games.shape, ranking.shape, teams.shape)\n",
    "\n",
    "def filter_by_game_id(df, game_id):\n",
    "    return df[df['GAME_ID'] == game_id]\n",
    "\n",
    "def filter_by_team_id(df, team_id):\n",
    "    return df[df['TEAM_ID'] == team_id]\n",
    "\n",
    "def filter_by_player_id(df, player_id):\n",
    "    return df[df['PLAYER_ID'] == player_id]\n",
    "\n",
    "def filter_on_season(df, season):\n",
    "    return df[df['GAME_ID'].astype(str).str[1:3] == season]\n",
    "\n",
    "def split_starters_bench(df):\n",
    "    is_starter = df['START_POSITION'].notna()\n",
    "    return df[is_starter], df[~is_starter]\n",
    "\n",
    "def extract_player_id(df):\n",
    "    return df['PLAYER_ID'].unique().tolist()\n",
    "\n",
    "def pivot_by_position(df):\n",
    "    start_pos = df['START_POSITION']\n",
    "    df['START_POSITION'] = np.where(start_pos.duplicated(keep=False), \n",
    "                      start_pos + df.groupby('START_POSITION').cumcount().add(1).astype(str),\n",
    "                      start_pos)\n",
    "    df = df.pivot(index='GAME_ID', columns='START_POSITION', values='PLAYER_ID')\n",
    "    return df.reset_index(drop=False)\n",
    "\n",
    "def get_df_id(df, cols_id):\n",
    "    return df[cols_id].drop_duplicates().reset_index(drop=True)\n",
    "\n",
    "def format_bench_df(values):\n",
    "    return pd.DataFrame([[values]], columns=['BENCH'])\n",
    "\n",
    "def filter_games_played(df):\n",
    "    return df[df['MIN'].notna()]\n",
    "\n",
    "def add_game_date_column(df):\n",
    "    games_df = games.copy()[['GAME_ID', 'GAME_DATE_EST']]\n",
    "    return df.merge(games_df, on='GAME_ID')\n",
    "\n",
    "def sort_by_date(df, ascending):\n",
    "    return df.sort_values('GAME_DATE_EST', ascending=ascending)\n",
    "\n",
    "def get_last_games(df, nb_games):\n",
    "    if len(df) < nb_games:\n",
    "        nb_games = len(df)\n",
    "    return df.iloc[0:nb_games]\n",
    "\n",
    "def extract_stats_col(df):\n",
    "    stats_cols = ['MIN', 'FG_PCT', 'FG3M', 'OREB', 'DREB', 'REB', 'BLK', 'PF', 'PTS', 'PLUS_MINUS']\n",
    "    return df[stats_cols]\n",
    "\n",
    "def format_column_player_stat(df, suffixe):\n",
    "    df.columns = [col+'_'+suffixe for col in df.columns]\n",
    "    return df        \n",
    "\n",
    "def at_least_n_games_played_season(df, season, nb_games=10):\n",
    "    df = filter_on_season(df, season=season)\n",
    "    return len(df) >= nb_games\n",
    "\n",
    "def get_current_ranking(df):\n",
    "    return df.sort_values('STANDINGSDATE', ascending=False).iloc[0]\n",
    "\n",
    "def convert_min(x):\n",
    "    if type(x) != type(list()):\n",
    "        return 0\n",
    "    elif len(x) < 2:\n",
    "        return int(x[0])\n",
    "    else: \n",
    "        return int(x[0])*60+int(x[1])\n",
    "\n",
    "def format_min_columns(df):\n",
    "    if 'MIN' in df.columns:\n",
    "        df['MIN'] = df['MIN'].str.split(':').apply(lambda x: convert_min(x))\n",
    "    return df\n",
    "\n",
    "def get_number_game_played(team_id, season, date):\n",
    "    df = filter_by_team_id(ranking, team_id=team_id)\n",
    "    df = df[df['SEASON_ID'].astype(str).str[-2:] == season]\n",
    "    df = df[df['STANDINGSDATE'] < date]\n",
    "    return len(df)\n",
    "\n",
    "def get_game_players(game_id, team_id):\n",
    "    df = games_detail.copy()\n",
    "    df = filter_by_game_id(df=df, game_id=game_id)\n",
    "    df = filter_by_team_id(df=df, team_id=team_id)\n",
    "    \n",
    "    starters, bench = split_starters_bench(df)\n",
    "    \n",
    "    bench_player = extract_player_id(bench)\n",
    "    bench_player = format_bench_df(bench_player)\n",
    "    start_player = pivot_by_position(starters)\n",
    "    df_id = get_df_id(df, cols_id=['GAME_ID', 'TEAM_ID'])\n",
    "    \n",
    "    df = pd.concat([df_id, start_player, bench_player], axis=1)\n",
    "    del df_id, start_player, bench_player\n",
    "    return df\n",
    "\n",
    "def get_player_stats(player_id, is_season, value):\n",
    "    \"\"\"\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    player_id\n",
    "        Id of the player\n",
    "    is_season: bool\n",
    "        if we want the season stats or per games\n",
    "    value:\n",
    "        season if is_season is True\n",
    "        number of games if is_season is False\n",
    "    \"\"\"\n",
    "    df = games_detail.copy()\n",
    "    df = filter_by_player_id(df=df, player_id=player_id)\n",
    "    df = filter_games_played(df)\n",
    "    df = add_game_date_column(df)\n",
    "    df = sort_by_date(df, ascending=False)\n",
    "    \n",
    "    if is_season:\n",
    "        if at_least_n_games_played_season(df, season=value, nb_games=10):\n",
    "            df = filter_on_season(df, season=value)\n",
    "        else:\n",
    "            df = get_last_games(df, nb_games=10)\n",
    "    else:\n",
    "        df = get_last_games(df, nb_games=value)\n",
    "    \n",
    "    df = extract_stats_col(df)\n",
    "    format_min_columns(df)\n",
    "    df = df.mean()    \n",
    "    return df.to_frame().T\n",
    "\n",
    "\n",
    "def get_team_global_stats(df, team_id, is_home):\n",
    "    season = df['GAME_ID'].astype(str).str[1:3].values[0]\n",
    "    date = df['GAME_DATE_EST'].values[0]\n",
    "    df = filter_on_season(games, season=season)\n",
    "    nb_games = get_number_game_played(team_id, season, date)\n",
    "    \n",
    "    if nb_games < 10:\n",
    "        season = str(int(season)-1)\n",
    "        df = filter_on_season(games, season=season)\n",
    "    \n",
    "    if is_home:\n",
    "        df = df[df['HOME_TEAM_ID'] == team_id]\n",
    "        df = df[['PTS_home', 'PTS_away']]\n",
    "    else:\n",
    "        df = df[df['VISITOR_TEAM_ID'] == team_id]\n",
    "        df = df[['PTS_away', 'PTS_home']]\n",
    "        \n",
    "    df.columns = ['PTS', 'PTS_CONCEDED']\n",
    "    df = df.mean().to_frame().T\n",
    "    \n",
    "    return df\n",
    "    \n",
    "\n",
    "def get_team_players_stats(df, team_id):\n",
    "    game_id = df['GAME_ID'].values[0]\n",
    "    season = df['GAME_ID'].astype(str).str[1:3].values[0]\n",
    "    df = get_game_players(game_id=game_id, team_id=team_id)\n",
    "    \n",
    "    players_stat = list()\n",
    "    positions = [c for c in df.columns if c not in ['GAME_ID', 'TEAM_ID', 'GAME_ID', 'BENCH']]\n",
    "    # positions = []\n",
    "    \n",
    "    for position in positions: # ['C','F1','F2','G1','G2']:\n",
    "        player_id = df[position].values[0]\n",
    "        \n",
    "        player_stat = get_player_stats(player_id=player_id, is_season=False, value=3)\n",
    "        player_stat = format_column_player_stat(player_stat, '3G_'+position)\n",
    "        players_stat.append(player_stat)\n",
    "        \n",
    "        player_stat = get_player_stats(player_id=player_id, is_season=True, value=season)\n",
    "        player_stat = format_column_player_stat(player_stat, 'SEASON_'+position)\n",
    "        players_stat.append(player_stat)\n",
    "    \n",
    "    bench_stat = list()\n",
    "    for player_id in df['BENCH'].values[0]:\n",
    "        player_stat = get_player_stats(player_id=player_id, is_season=False, value=3)\n",
    "        player_stat_3g = format_column_player_stat(player_stat, '3G_BENCH')\n",
    "        player_stat = get_player_stats(player_id=player_id, is_season=True, value=season)\n",
    "        player_stat_season = format_column_player_stat(player_stat, 'SEASON_BENCH')\n",
    "        \n",
    "        bench_stat.append(pd.concat([player_stat_3g, player_stat_season], axis=1))\n",
    "        \n",
    "    bench_stat = pd.concat(bench_stat)\n",
    "    bench_stat = bench_stat.mean().to_frame().T\n",
    "        \n",
    "    df = pd.concat([df]+players_stat+[bench_stat], axis=1)            \n",
    "    return df\n",
    "\n",
    "def get_team_rank(df, team_id):\n",
    "    date = df['GAME_DATE_EST'].values[0]\n",
    "    season = df['SEASON'].values[0]\n",
    "    \n",
    "    team_ranking = filter_by_team_id(ranking, team_id=team_id)\n",
    "    team_ranking = team_ranking[team_ranking['STANDINGSDATE'] < date]\n",
    "    \n",
    "    if len(team_ranking) == 0:\n",
    "        return None\n",
    "    \n",
    "    current = get_current_ranking(team_ranking)\n",
    "    if current['G'] < 10:\n",
    "        team_ranking = team_ranking[team_ranking['SEASON_ID'].astype(str).str[-4:] == season]\n",
    "        if len(team_ranking) > 0:            \n",
    "            current = get_current_ranking(team_ranking)\n",
    "    \n",
    "    return current[['G','W_PCT','HOME_RECORD','ROAD_RECORD']].to_frame().T.reset_index(drop=True)\n",
    "\n",
    "def get_team_details(df, col_team_id):\n",
    "    team_id = df[col_team_id].values[0]\n",
    "    is_home = 'HOME' in col_team_id\n",
    "    \n",
    "    team_global_stats = get_team_global_stats(df, team_id=team_id, is_home=is_home)\n",
    "    team_player_stats = get_team_players_stats(df, team_id=team_id)\n",
    "    team_rank = get_team_rank(df, team_id=team_id)\n",
    "    df_id = get_df_id(df, cols_id=[col_team_id])\n",
    "    df =  pd.concat([team_rank, team_player_stats, team_global_stats], axis=1)\n",
    "    del df['GAME_ID']\n",
    "    \n",
    "    return df\n",
    "\n",
    "\n",
    "def format_game(game_id):\n",
    "    df = filter_by_game_id(games, game_id=game_id)\n",
    "    if len(df) < 1:\n",
    "        return None\n",
    "    if len(df) > 1:\n",
    "        df = df.drop_duplicates()\n",
    "    \n",
    "    home_team = get_team_details(df, 'HOME_TEAM_ID')\n",
    "    away_team = get_team_details(df, 'VISITOR_TEAM_ID')\n",
    "    \n",
    "    df = df[['GAME_ID', 'HOME_TEAM_WINS', 'HOME_TEAM_ID','VISITOR_TEAM_ID']]\n",
    "    df = df.merge(home_team, how='inner', left_on='HOME_TEAM_ID', right_on='TEAM_ID')\n",
    "    df = df.merge(away_team, how='inner', left_on='VISITOR_TEAM_ID', right_on='TEAM_ID', suffixes=('_home','_away'))\n",
    "    \n",
    "    del df['TEAM_ID_home'], df['TEAM_ID_away'], df['BENCH_home'], df['BENCH_away']\n",
    "    return df\n",
    "\n",
    "available_game = games_detail['GAME_ID'].drop_duplicates().reset_index(drop=True)\n",
    "\n",
    "available_game = games.merge(available_game, how='inner', on='GAME_ID')\n",
    "games_train = available_game[available_game['GAME_ID'].astype(str).str[1:3] != '11']\n",
    "games_train = games_train.sort_values('GAME_DATE_EST', ascending=False)\n",
    "games_train['FILTER'] = games_train['GAME_ID'].astype(str).str[1:3].astype(int)\n",
    "games_train = games_train[games_train['FILTER'] <= 17]\n",
    "t0 = time()\n",
    "season = '17'\n",
    "games_list = list()\n",
    "\n",
    "for game_id in games_train['GAME_ID']:\n",
    "    games_list.append(format_game(game_id=game_id))\n",
    "    \n",
    "    if str(game_id)[1:3] != season and len(games_list) > 0:\n",
    "        df_to_save = pd.concat(games_list)\n",
    "        df_to_save.to_csv('data/games_formated_20'+season+'.csv', index=False)\n",
    "        print('data/games_formated_20'+season+'.csv', '- time elapsed : %.2fs'%(time()-t0), df_to_save.shape)\n",
    "        season = str(game_id)[1:3]\n",
    "\n",
    "\n",
    "df_to_save = pd.concat(games_list)\n",
    "df_to_save.to_csv('games_formated.csv', index=False)\n",
    "print('games_formated.csv - time elapsed : %.2fs'%(time()-t0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2733ea4-15c4-40ba-bf0b-87edee36da96",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
